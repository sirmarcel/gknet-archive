import numpy as np
import io

cc_paper_temps = np.arange(300, 2700, 300)
cc_paper_kappas = np.array(
    [
        8.594184915645307,
        5.1027337727229565,
        4.546365921653143,
        3.169997201949584,
        3.2613788179066194,
        3.3546218708076228,
        2.826802744152861,
        2.9332686200290543,
    ]
)
cc_paper_min = np.array(
    [
        6.791576969487301,
        4.296214385381241,
        3.7251414397022184,
        2.693160335220089,
        2.925508622782415,
        3.009149122861315,
        2.445517017457439,
        2.4696113840049967,
    ]
)

np.savez_compressed(
    "result_cc",
    temperature=cc_paper_temps,
    kappa=cc_paper_kappas,
    error=cc_paper_kappas - cc_paper_min,
)


data_verdi = """
# temperature, kappa, std
300,7.00000,1.03175
400,5.44444,0.76190
500,4.42857,0.55556
600,3.49206,0.49206
800,2.90476,0.26984
1000,2.49206,0.19048
1200,2.14286,0.12698
1400,1.93651,0.14286
1600,1.69841,0.11111
1800,1.60317,0.09524
2000,1.58730,0.01587
"""

with io.StringIO(data_verdi) as f:
    verdi = np.loadtxt(f, delimiter=",")

np.savez_compressed(
    "result_verdi", temperature=verdi[:, 0], kappa=verdi[:, 1], error=verdi[:, 2]
)


data_raghavan = """
# T in C, kappa in W/mK
101.8315018315019, 6.272388184636814
106.22710622710628, 6.089653186545326
112.08791208791212, 5.921570203105852
202.93040293040298, 5.455223630726373
210.25641025641033, 5.411481875832882
213.1868131868132, 5.367659762540933
312.8205128205129, 4.8941612926987705
317.21611721611725, 4.857678579799238
391.941391941392, 4.610415787746684
402.19780219780216, 4.508226691042048
410.98901098901104, 4.464511722281375
506.2271062271062, 4.056746422377135
510.62271062271066, 4.042201552256397
515.018315018315, 4.013031453616462
602.9304029304029, 3.890324179172442
601.4652014652015, 3.8317964789628407
597.0695970695972, 3.8097782777855898
705.4945054945055, 3.702071237720232
702.5641025641027, 3.7093302797141914
800.7326007326008, 3.5868105081999047
805.1282051282051, 3.564953023819568
"""


with io.StringIO(data_raghavan) as f:
    raghavan = np.loadtxt(f, delimiter=",")

np.savez_compressed(
    "result_raghavan",
    temperature=raghavan[:, 0] + 273.15,
    kappa=raghavan[:, 1],
    error=np.zeros_like(raghavan[:, 1]),
)

data_mevrel = """
# T in C, kappa in W/mK, kappa min in W/mK
35.89743589743591, 7.269629629629632, 6.616324786324788
98.90109890109892, 6.213076923076925, 5.6530769230769256
198.53479853479854, 5.2194586894586905, 4.737236467236469
298.1684981684982, 4.4280626780626795, 4.00806267806268
399.26739926739924, 3.9322507122507133, 3.5744729344729356
498.901098901099, 3.545299145299147, 3.21863247863248
598.5347985347985, 3.2672364672364678, 2.956125356125357
698.1684981684982, 3.0358404558404564, 2.755840455840457
799.2673992673994, 2.8666951566951573, 2.6178062678062686
898.901098901099, 2.744188034188034, 2.479743589743589
998.5347985347985, 2.6216809116809117, 2.388347578347579
1098.1684981684982, 2.545840455840456, 2.312535612535612
1199.2673992673992, 2.532250712250713, 2.2989173789173787

"""


with io.StringIO(data_mevrel) as f:
    mevrel = np.loadtxt(f, delimiter=",")

np.savez_compressed(
    "result_mevrel",
    temperature=mevrel[:, 0] + 273.15,
    kappa=mevrel[:, 1],
    error=mevrel[:, 1] - mevrel[:, 2],
)

np.savez_compressed(
    "result_hasselman",
    temperature=np.array([300, 300]),
    kappa=np.array([4.82, 5.2]),
    error=np.array([0.0, 0.0]),
)

np.savez_compressed(
    "result_bisson",
    temperature=np.array([300]),
    kappa=np.array([8.2]),
    error=np.array([0.82]),
)
